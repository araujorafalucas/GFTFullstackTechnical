// <auto-generated />
using GFTTechnicalTest.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GFTTechnicalTest.Infrastructure.Data.Migrations
{
    [DbContext(typeof(GFTTechnicalTestContext))]
    partial class GFTTechnicalTestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("GFTTechnicalTest.Domain.Entities.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AllowMultipleOrders")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DishType")
                        .HasColumnType("int");

                    b.Property<string>("MealTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            AllowMultipleOrders = false,
                            Description = "eggs",
                            DishType = 1,
                            MealTime = "morning"
                        },
                        new
                        {
                            DishId = 2,
                            AllowMultipleOrders = false,
                            Description = "toast",
                            DishType = 2,
                            MealTime = "morning"
                        },
                        new
                        {
                            DishId = 3,
                            AllowMultipleOrders = true,
                            Description = "coffee",
                            DishType = 3,
                            MealTime = "morning"
                        },
                        new
                        {
                            DishId = 4,
                            AllowMultipleOrders = false,
                            Description = "steak",
                            DishType = 1,
                            MealTime = "night"
                        },
                        new
                        {
                            DishId = 5,
                            AllowMultipleOrders = true,
                            Description = "potato",
                            DishType = 2,
                            MealTime = "night"
                        },
                        new
                        {
                            DishId = 6,
                            AllowMultipleOrders = false,
                            Description = "wine",
                            DishType = 3,
                            MealTime = "night"
                        },
                        new
                        {
                            DishId = 7,
                            AllowMultipleOrders = false,
                            Description = "cake",
                            DishType = 4,
                            MealTime = "night"
                        });
                });

            modelBuilder.Entity("GFTTechnicalTest.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("HasError")
                        .HasColumnType("bit");

                    b.Property<string>("MealTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderInput")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GFTTechnicalTest.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AmountOrdered")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("GFTTechnicalTest.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("GFTTechnicalTest.Domain.Entities.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GFTTechnicalTest.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GFTTechnicalTest.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
